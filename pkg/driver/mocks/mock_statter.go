// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/driver/statter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStatter is a mock of Statter interface
type MockStatter struct {
	ctrl     *gomock.Controller
	recorder *MockStatterMockRecorder
}

// MockStatterMockRecorder is the mock recorder for MockStatter
type MockStatterMockRecorder struct {
	mock *MockStatter
}

// NewMockStatter creates a new mock instance
func NewMockStatter(ctrl *gomock.Controller) *MockStatter {
	mock := &MockStatter{ctrl: ctrl}
	mock.recorder = &MockStatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatter) EXPECT() *MockStatterMockRecorder {
	return m.recorder
}

// StatFS mocks base method
func (m *MockStatter) StatFS(path string) (int64, int64, int64, int64, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatFS", path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(int64)
	ret4, _ := ret[4].(int64)
	ret5, _ := ret[5].(int64)
	ret6, _ := ret[6].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6
}

// StatFS indicates an expected call of StatFS
func (mr *MockStatterMockRecorder) StatFS(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatFS", reflect.TypeOf((*MockStatter)(nil).StatFS), path)
}

// IsBlockDevice mocks base method
func (m *MockStatter) IsBlockDevice(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlockDevice", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBlockDevice indicates an expected call of IsBlockDevice
func (mr *MockStatterMockRecorder) IsBlockDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlockDevice", reflect.TypeOf((*MockStatter)(nil).IsBlockDevice), arg0)
}
